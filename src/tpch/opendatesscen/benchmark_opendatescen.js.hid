//////////////////////////////////////////////////////////////////////////////
var inNode=(typeof window == 'undefined' );
if(typeof module == 'undefined'){
  module={};
} else { 
}
if (inNode){
  mav1 =require("mav01");
  mav3 =require("mav03");
  mav4 =require("mav04");
  mav5 =require("mav05");
  mav6 =require("mav06");
  mav7 =require("mav07");
  mav8 =require("mav08");
  mav10=require("mav10");
  mav12=require("mav12");
  mav14=require("mav14");
  mav15=require("mav15");
  mav20=require("mav20");

  query1_fsql =require("./fsql/q01");
  query3_fsql =require("./fsql/q03");
  query4_fsql =require("./fsql/q04");
  query5_fsql =require("./fsql/q05");
  query6_fsql =require("./fsql/q06");
  query7_fsql =require("./fsql/q07");
  query8_fsql =require("./fsql/q08");
  query10_fsql=require("./fsql/q10");
  query12_fsql=require("./fsql/q12");
  query14_fsql=require("./fsql/q14");
  query15_fsql=require("./fsql/q15");
  query20_fsql=require("./fsql/q20");

  ans1=require("ans1");
  ans3=require("ans3");
  ans4=require("ans4");
  ans5=require("ans5");
  ans6=require("ans6");
  ans7=require("ans7");
  ans8=require("ans8");
  ans10=require("ans10");
  ans12=require("ans12");
  ans14=require("ans14");
  ans15=require("ans15");
  ans20=require("ans20");
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
mavs=[mav1,mav3,mav4,mav5,mav6,mav7,mav8,mav10,mav12,mav14,mav15,mav20];

queries_fsql=[query1_fsql,
query3_fsql,
query4_fsql,
query5_fsql,
query6_fsql,
query7_fsql,
query8_fsql,
query10_fsql,
query12_fsql,
query14_fsql,
query15_fsql,
query20_fsql,
]
answers=[ans1,
ans3,
ans4,
ans5,
ans6,
ans7,
ans8,
ans10,
ans12,
ans14,
ans15,
ans20,
]

function equalcell(name,num,c1,c2){
  if (c1==c2) return true;
  if ( c1<(c2*1.01) && c2<(c1*1.01) ) return true;
  console.log("qname:"+ name +"cell#"+ num + "mycell:[" + c1 + "]!=[" + c2+"]");
  return false;
}

function verify_query(qnum,q,ma,noasm){
  var mya= q(noasm).toArray2();
  var name=(qnum+1);
  if (mya.length != ma.length){
    return false;
  } else {
  }
  for (var i=0; i<ma.length;i++){
    if (!equalcell(name,i,mya[i],ma[i])){
      console.log("query "+ name + " answers dont match");
      return false;
    }
  }
  return true;
}
function verifyqs(noasm,backend){
  var verifiedA=[];
  if (backend)
    console.log("verifying q's_fsql");
  else 
    console.log("verifying q's noasm:"+noasm);
  for (var i=0; i<queries.length; i++){
    var query;
    if (backend)
      query=queries_fsql[i];
    else 
      query=queries[i]
    var model_answer=answers[i];
    var verified= verify_query(i,query,model_answer,noasm);
    verifiedA.push(verified);
  }
  return verifiedA;
}
function start_collecting(){
   
  child_process.exec("perf stat -p "+process.pid + " -o tmp -B -e cache-references,cache-misses,cycles,instructions,branches,branch-misses,stalled-cycles-backend,stalled-cycles-frontend,faults,migrations sleep 5");
}
function end_collecting(qnum){
  child_process.execSync("sleep 5");
  var cache_ref=parseInt(child_process.execSync("grep cache-ref tmp | cut -d \\t -f 1")+"");
  if (isNaN(cache_ref)) cache_ref=0;
  var cache_misses=parseInt(child_process.execSync("grep cache-misses tmp | cut -d \\t -f 1")+"");
  if (isNaN(cache_misses)) cache_misses=0;
  var cycles=parseInt(child_process.execSync("grep cycles.\*GH tmp | cut -d \\t -f 1")+"");
  if (isNaN(cycles)) cycles=0;
  var instructions=parseInt(child_process.execSync("grep instructions tmp | cut -d \\t -f 1")+"");
  if (isNaN(instructions)) instructions=0;
  var branches=parseInt(child_process.execSync("grep branches tmp | cut -d \\t -f 1")+"");
  if (isNaN(branches)) branches=0;
  var branch_misses=parseInt(child_process.execSync("grep branch-misses tmp | cut -d \\t -f 1")+"");
  if (isNaN(branch_misses)) branches=0;
  var stalled_cycles_backend=parseInt(child_process.execSync("grep stalled-cycles-backend tmp | cut -d \\t -f 1")+"");
  if (isNaN(stalled_cycles_backend)) stalled_cycles_backend=0;
  var stalled_cycles_frontend=parseInt(child_process.execSync("grep stalled-cycles-frontend tmp | cut -d \\t -f 1")+"");
  if (isNaN(stalled_cycles_frontend)) scf=0;
  var faults=parseInt(child_process.execSync("grep faults tmp | cut -d \\t -f 1")+"");
  if (isNaN(faults)) faults=0;
  var migrations=parseInt(child_process.execSync("grep migrations tmp | cut -d \\t -f 1")+"");
  if (isNaN(migrations)) migrations=0;
  child_process.execSync("echo q" + (qnum+1) +":"+cache_ref+","+cache_misses+","+cycles+","+ instructions +","+branches+","+branch_misses+","+stalled_cycles_backend +","+stalled_cycles_frontend+","+faults+","+migrations+" >> perfstats.out");

  child_process.execSync("rm tmp");
  
}
function timeqs(osperf,noasm,backend){
  var timeA=[];
  var t0,t1;
  for (var i=0; i<queries.length; i++){
    var query;
    if (backend)
      query=queries_fsql[i];
    else 
      query=queries[i]
    if (osperf) start_collecting();
    if (inNode)
      t0=process.hrtime();
    else
      t0 = window.performance.now();
    query(noasm).materialize(noasm);
    if (inNode)
      t1=process.hrtime();
    else
      t1 = window.performance.now();
    if (osperf) end_collecting(i);
    if (inNode)
      timeA.push((((t1[0]-t0[0])*(1000)) + ((t1[1]-t0[1])/(1000*1000))));
    else 
      timeA.push(t1-t0);
  }
  return timeA;
}
function count_calls(osperf,noasm){
  var timeA=[];
  var t0,t1;
  for (var i=0; i<queries.length; i++){
    var query=queries[i];
    if (osperf) start_collecting();
    if (inNode)
      t0=process.hrtime();
    else
      t0 = window.performance.now();
    fcall_ctr=0;
    query(noasm).materialize(noasm); 
    console.log("q:"+i+" fcall_ctr"+fcall_ctr);
    if (inNode)
      t1=process.hrtime();
    else
      t1 = window.performance.now();
    if (osperf) end_collecting(i);
    if (inNode)
      timeA.push((((t1[0]-t0[0])*(1000)) + ((t1[1]-t0[1])/(1000*1000))));
    else
      timeA.push(t1-t0);
  }
  return timeA;
}
function count_mats(osperf,noasm){
  var timeA=[];
  var t0,t1;
  for (var i=0; i<queries.length; i++){
    var query=queries[i];
    if (osperf) start_collecting();
    if (inNode)
      t0=process.hrtime();
    else
      t0 = window.performance.now();
    fcall_ctr=0;
    var mem0= malloc(0);
    var mattemps=query(noasm);
    var mem1= malloc(0);
    mattemps.materialize(noasm);
    var mem2= malloc(0);
    console.log("q:"+i+" mem-mats:"+(mem1-mem0)+ " mem-ans:"+ (mem2-mem1));
    if (inNode)
      t1=process.hrtime();
    else
      t1 = window.performance.now();
    if (osperf) end_collecting(i);
    if (inNode)
      timeA.push((((t1[0]-t0[0])*(1000)) + ((t1[1]-t0[1])/(1000*1000))));
    else
      timeA.push(t1-t0);
  }
  return timeA;
}
function benchmark_metrics(warmup,rounds,noasm){
  if (typeof warmup== 'undefined') warmup =1;
  if (typeof rounds == 'undefined') rounds=5;
  var run;
  var tmpstr="";
  var verifiedAA=[];
  var runtimesMSAA=[];
  var osperf=true;
  for (var w=0; w<warmup; w++){
      run=verifyqs();
      verifiedAA.push(run);
  }
  for (var r=0; r<rounds;r++){
      run=timeqs(true,noasm);
      runtimesMSAA.push(run);
  }
  for (var i=0; i<verifiedAA[0].length; i++ ){
    tmpstr="";
    for (var ii=0; ii<rounds;ii++){
      tmpstr+=verifiedAA[ii][i] +",";
    }
    console.log("query"+(i+1) + ":" + tmpstr);
  }
  for (var i=0; i<verifiedAA[0].length; i++){
    tmpstr="";
    for (var ii=0; ii<rounds; ii++){
      tmpstr+=runtimesMSAA[ii][i] +",";
    }
    console.log("query"+(i+1) + ":" + tmpstr);
  }
}
function materialize_be_mavs(){
  for (var i=0;i<mavs.length;i++)
    mavs[i]().materialize_be();
}
function benchmark_opendatescen(warmup,rounds){
  if (typeof warmup== 'undefined') warmup =1;
  if (typeof rounds == 'undefined') rounds=5;
  if (typeof backend == 'undefined') backend=false;
  var run;
  var tmpstr="";
  var verifiedAA=[];
  var runtimesMSAA=[];
  var osperf=false;
  materialize_be_mavs();
  //create be view..
  //pull be view..
  //run queries be..
  //run queries be using mav
  //run queries fe using mav
  for (var w=0; w<warmup; w++){
      run=verifyqs(noasm,backend);
      verifiedAA.push(run);
  }
  for (var r=0; r<rounds;r++){
      run=timeqs(osperf,noasm,backend);
      runtimesMSAA.push(run);
  }
  for (var i=0; (typeof  verifiedAA[0] !='undefined')&& i<verifiedAA[0].length; i++ ){
    tmpstr="";
    for (var ii=0; ii<rounds;ii++){
      tmpstr+=verifiedAA[ii][i] +",";
    }
    console.log("query"+(i+1) + ":" + tmpstr);
  }
  for (var i=0; (typeof  runtimesMSAA[0] !='undefined')&&i<runtimesMSAA[0].length; i++){
    tmpstr="";
    for (var ii=0; ii<rounds; ii++){
      tmpstr+=runtimesMSAA[ii][i] +",";
    }
    console.log("query"+(i+1) + ":" + tmpstr);
  }
}
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
if(inNode){
  console.log('exporting bechmark_tpch');
  global.benchmark=benchmark;
  global.benchmark_metrics=benchmark_metrics;
} else delete module;
//////////////////////////////////////////////////////////////////////////////
